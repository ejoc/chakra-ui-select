{"version":3,"sources":["../../src/theme/select-single.ts","../../src/theme/index.ts","../../src/theme/select-multiple.ts","../../src/search-input.tsx","../../src/use-select.ts","../../src/select-single.tsx","../../src/select-multiple.tsx","components/SelectMultipleWrapper.tsx","App.tsx","index.tsx"],"names":["baseStyleMenu","pos","mt","w","zIndex","overflow","maxH","rounded","baseStyleList","props","py","bg","mode","boxShadow","border","borderColor","baseStyleOption","pl","pr","color","userSelect","cursor","fontWeight","transition","_focus","_active","_expanded","_selected","_disabled","opacity","baseStyleControl","theme","position","shadow","textAlign","display","alignItems","flexWrap","justifyContent","minH","outline","_focusWithin","getColor","_readOnly","_hover","baseStyleLabel","d","fontSize","baseStyleButton","inset","h","parts","baseStyle","menu","list","option","control","label","button","SelectSingle","SelectMultiple","sizerStyle","top","left","visibility","height","whiteSpace","copyStyles","styles","node","SearchInput","forwardRef","wrapperStyle","className","placeholder","minWidth","placeholderIsMinWidth","isDisabled","inputProps","useState","inputWidth","setInputWidth","inputRef","useRef","sizerRef","placeHolderSizerRef","_className","cx","sizerValue","useImperativeHandle","ref","focus","useEffect","copyInputStyles","newInputWidth","Math","window","inputNode","inputStyles","_wrapperStyle","_inputProps","padding","boxSizing","background","chakra","sx","createContext","strict","name","SelectProvider","useSelect","SelectValueContainer","React","flex","ArrowIndicator","insetY","right","pointerEvents","SelectControl","onClick","rest","selectedItem","clearSelection","p","tabIndex","callAllHandlers","event","focusable","boxSize","stroke","strokeLinecap","strokeLinejoin","strokeWidth","ownProps","useFormControl","useStyles","__css","SelectButton","getToggleButtonProps","isOpen","getDropdownProps","preventKeyAction","SelectSearchInput","getInputProps","selectedItems","input","m","pb","pt","type","autoCapitalize","SelectOption","children","value","index","getItemProps","highlightedIndex","isSelected","isActive","dataAttr","item","runIfFn","SelectMenuList","SelectMenu","getMenuProps","id","defaultValue","defaultIsOpen","defaultHighlightedIndex","onChange","itemToString","useMultiStyleConfig","initialSelectedItem","initialIsOpen","initialHighlightedIndex","downshift","inputValue","getLabelProps","SelectedItemTag","removeSelectedItem","getSelectedItemProps","size","e","initialSelectedItems","defaultSelectedItems","useMultipleSelection","onSelectedItemsChange","addSelectedItem","getStateAndHelpers","useCallback","stateReducer","changes","Downshift","state","onStateChange","ctx","defaultFilterOption","items","getOptionLabel","filter","indexOf","toLowerCase","startsWith","SelectMultipleWrapper","options","i","getOptionKey","filterOption","isSearchable","noOptionsMessage","showPlaceholder","length","noOptionsMsg","showNoOptionsMsg","map","key","span","aria-label","aria-hidden","fill","viewBox","xmlns","JSON","stringify","div","extendTheme","components","selectTheme","fruits","fruitValues","App","selected","setSelected","my","maxW","mx","isTruncated","as","ChevronDownIcon","matchSorter","keys","getFilteredItems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd331d01.chunk.js","sourcesContent":["import { getColor, mode } from '@chakra-ui/theme-tools'\n\nconst parts = ['control', 'menu', 'list', 'option', 'label', 'button']\n\ntype Dict = Record<string, any>\n\nconst baseStyleMenu = {\n  pos: 'absolute',\n  mt: 1,\n  w: 'full',\n  zIndex: 2,\n  overflow: 'auto',\n  maxH: 60,\n  rounded: 'md'\n}\n\nfunction baseStyleList(props: Dict) {\n  return {\n    py: 1,\n    rounded: 'md',\n    w: 'full',\n    bg: mode(`#fff`, `gray.700`)(props),\n    boxShadow: mode(`lg`, `dark-lg`)(props),\n    border: '1px',\n    borderColor: 'gray.100'\n  }\n}\n\nfunction baseStyleOption(props: Dict) {\n  return {\n    py: 2,\n    pl: 3,\n    pr: 9,\n    color: mode(`gray.900`, `gray.50`)(props),\n    pos: 'relative',\n    userSelect: 'none',\n    cursor: 'default',\n    fontWeight: 'normal',\n    transition: 'background 50ms ease-in 0s',\n    _focus: {\n      bg: mode(`gray.100`, `whiteAlpha.100`)(props)\n    },\n    _active: {\n      bg: mode(`gray.100`, `whiteAlpha.200`)(props)\n    },\n    _expanded: {\n      bg: mode(`gray.100`, `whitxeAlpha.100`)(props)\n    },\n    _selected: {\n      bg: 'gray.50',\n      fontWeight: 'semibold'\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    }\n  }\n}\n\nfunction baseStyleControl(props: Dict) {\n  const { theme } = props\n  return {\n    bg: 'white',\n    position: 'relative',\n    w: 'full',\n    border: '1px',\n    borderColor: 'gray.300',\n    rounded: 'md',\n    shadow: 'base',\n    textAlign: 'left',\n    cursor: 'default',\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    minH: 10,\n    transition: 'all 0.2s',\n    outline: 0,\n    _focusWithin: {\n      outline: 'none',\n      borderColor: 'gray.400',\n      boxShadow: `0 0 0 1px ${getColor(theme, 'gray.400')}`\n    },\n    _focus: {\n      outline: 'none',\n      borderColor: 'gray.400',\n      boxShadow: `0 0 0 1px ${getColor(theme, 'gray.400')}`\n    },\n    _readOnly: { boxShadow: 'none !important', userSelect: 'all' },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    },\n    _hover: {\n      borderColor: 'gray.400',\n      _disabled: {\n        borderColor: 'gray.300'\n      }\n    }\n  }\n}\n\nfunction baseStyleLabel(props: Dict) {\n  return {\n    d: 'block',\n    fontSize: 'sm',\n    fontWeight: 'medium',\n    color: mode(`gray.700`, `gray.50`)(props)\n  }\n}\n\nconst baseStyleButton = {\n  zIndex: 0,\n  pos: 'absolute',\n  inset: 0,\n  w: '100%',\n  h: '100%',\n  cursor: 'default',\n  _focus: { outline: 'none' },\n  _disabled: {\n    opacity: 0.4,\n    cursor: 'not-allowed'\n  }\n}\n\nconst baseStyle = (props: Dict) => ({\n  menu: baseStyleMenu,\n  list: baseStyleList(props),\n  option: baseStyleOption(props),\n  control: baseStyleControl(props),\n  label: baseStyleLabel(props),\n  button: baseStyleButton\n})\n\nexport default {\n  parts,\n  baseStyle\n}\n","import SelectSingle from './select-single'\nimport SelectMultiple from './select-multiple'\n\ninterface Theme {\n  SelectSingle: any\n  SelectMultiple: any\n}\n\nexport default {\n  SelectSingle,\n  SelectMultiple\n} as Theme\n","import SelectSingle from './select-single'\n\nconst parts = ['control', 'menu', 'list', 'option', 'label', 'button']\n\nconst baseStyle = SelectSingle.baseStyle\n\nexport default {\n  parts,\n  baseStyle\n}\n","import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\nimport { chakra, forwardRef, HTMLChakraProps } from '@chakra-ui/system'\nimport { cx } from '@chakra-ui/utils'\n\nexport interface SearchInputProps extends HTMLChakraProps<'input'> {\n  wrapperStyle?: HTMLChakraProps<'div'>\n  className?: string\n  placeholderIsMinWidth?: boolean\n  extraWidth?: string | number\n  isDisabled?: boolean\n}\n\nconst sizerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'scroll',\n  whiteSpace: 'pre'\n}\n\nconst copyStyles = (styles: CSSStyleDeclaration, node: HTMLDivElement) => {\n  node.style.fontSize = styles.fontSize\n  node.style.fontFamily = styles.fontFamily\n  node.style.fontWeight = styles.fontWeight\n  node.style.fontStyle = styles.fontStyle\n  node.style.letterSpacing = styles.letterSpacing\n  node.style.textTransform = styles.textTransform\n}\n\nexport const SearchInput = forwardRef<SearchInputProps, 'input'>(\n  (props, ref) => {\n    const {\n      wrapperStyle,\n      className,\n      placeholder,\n      minWidth,\n      placeholderIsMinWidth,\n      isDisabled,\n      ...inputProps\n    } = props\n    const [inputWidth, setInputWidth] = useState(minWidth)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const sizerRef = useRef<HTMLDivElement>(null)\n    const placeHolderSizerRef = useRef<HTMLDivElement>(null)\n    const _className = cx('chakra-select__search-input', className)\n    const sizerValue = props.defaultValue || props.value || ''\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef?.current?.focus()\n      }\n    }))\n\n    useEffect(() => {\n      copyInputStyles()\n    }, [])\n\n    useEffect(() => {\n      if (!sizerRef || typeof sizerRef.current?.scrollWidth === 'undefined') {\n        return\n      }\n\n      let newInputWidth\n      if (\n        placeholder &&\n        (!props.value || (props.value && placeholderIsMinWidth))\n      ) {\n        newInputWidth =\n          Math.max(\n            sizerRef.current.scrollWidth,\n            placeHolderSizerRef.current?.scrollWidth as number\n          ) + 2\n      } else {\n        newInputWidth = sizerRef.current?.scrollWidth + 2\n      }\n\n      if (minWidth && newInputWidth < minWidth) {\n        newInputWidth = minWidth\n      }\n      if (newInputWidth !== inputWidth) {\n        setInputWidth(newInputWidth)\n      }\n    }, [sizerValue, minWidth, inputWidth, placeholderIsMinWidth, placeholder])\n\n    const copyInputStyles = () => {\n      if (!window.getComputedStyle || !inputRef?.current) {\n        return\n      }\n      const inputNode = inputRef.current\n      const inputStyles = inputNode && window.getComputedStyle(inputNode)\n      if (!inputStyles) {\n        return\n      }\n      if (sizerRef.current) {\n        copyStyles(inputStyles, sizerRef.current)\n      }\n      if (placeHolderSizerRef.current) {\n        copyStyles(inputStyles, placeHolderSizerRef.current)\n      }\n    }\n\n    const _wrapperStyle = {\n      d: 'inline-block',\n      visibility: isDisabled ? 'hidden' : 'visible',\n      color: 'gray.800',\n      ...wrapperStyle\n    } as HTMLChakraProps<'div'>\n\n    const _inputProps = {\n      w: `${inputWidth}px`,\n      border: 0,\n      fontSize: 'inherit',\n      outline: 0,\n      padding: 0,\n      color: 'inherit',\n      boxSizing: 'content-box',\n      background: '0px center',\n      ...inputProps\n    } as HTMLChakraProps<'input'>\n\n    return (\n      <chakra.div className={_className} {..._wrapperStyle}>\n        <chakra.input\n          placeholder={placeholder}\n          {..._inputProps}\n          ref={inputRef}\n        />\n        <chakra.div ref={sizerRef} sx={sizerStyle}>\n          {sizerValue}\n        </chakra.div>\n        {placeholder && (\n          <chakra.div ref={placeHolderSizerRef} sx={sizerStyle}>\n            {placeholder}\n          </chakra.div>\n        )}\n      </chakra.div>\n    )\n  }\n)\n","import {\n  ControllerStateAndHelpers,\n  UseMultipleSelectionReturnValue\n} from 'downshift'\nimport { createContext } from '@chakra-ui/react-utils'\nimport { RefObject } from 'react'\n\ntype SelectContext<Item = any> = ControllerStateAndHelpers<Item> &\n  Partial<UseMultipleSelectionReturnValue<Item>> & {\n    isDisabled?: boolean\n    inputRef: RefObject<HTMLInputElement>\n  }\nconst [SelectProvider, useSelect] = createContext<SelectContext>({\n  strict: false,\n  name: 'DownshiftContext'\n})\n\nexport { SelectProvider, useSelect }\n","import React, { Fragment, useImperativeHandle, useRef } from 'react'\nimport {\n  chakra,\n  ChakraProps,\n  HTMLChakraProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef\n} from '@chakra-ui/system'\nimport { dataAttr, runIfFn, cx, callAllHandlers } from '@chakra-ui/utils'\nimport { MaybeRenderProp } from '@chakra-ui/react-utils'\nimport Icon from '@chakra-ui/icon'\nimport Downshift, {\n  ControllerStateAndHelpers,\n  DownshiftProps,\n  GetItemPropsOptions,\n  PropGetters\n} from 'downshift'\nimport { FormControlOptions, useFormControl } from '@chakra-ui/form-control'\nimport { SearchInput } from './search-input'\nimport { SelectProvider, useSelect } from './use-select'\n\nexport interface SelectValueContainerProps extends HTMLChakraProps<'div'> {}\nexport function SelectValueContainer(props: SelectValueContainerProps) {\n  return (\n    <chakra.div\n      d='flex'\n      alignItems='center'\n      flex='1 1 0%'\n      flexWrap='wrap'\n      padding='2px 8px'\n      pos='relative'\n      overflow='hidden'\n      {...props}\n    />\n  )\n}\n\nexport interface ArrowIndicatorProps extends HTMLChakraProps<'div'> {}\nexport const ArrowIndicator = forwardRef<ArrowIndicatorProps, 'div'>(\n  (props, ref) => {\n    return (\n      <chakra.div\n        ref={ref}\n        pos='absolute'\n        insetY={0}\n        right={0}\n        pr={2}\n        display='flex'\n        alignItems='center'\n        pointerEvents='none'\n        color='gray.500'\n        {...props}\n      />\n    )\n  }\n)\n\nexport const SelectClearIndicator = forwardRef<ArrowIndicatorProps, 'div'>(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { selectedItem, clearSelection, inputRef, isDisabled } = useSelect()\n    const _className = cx('chakra-select__clean-btn', className)\n\n    if (!selectedItem || isDisabled) return null\n    return (\n      <chakra.div\n        d='flex'\n        p={2}\n        ref={ref}\n        aria-hidden\n        className={_className}\n        zIndex={1}\n        tabIndex={-1}\n        outline='none'\n        color='gray.500'\n        w='100%'\n        h='100%'\n        alignItems='center'\n        justifyContent='center'\n        _hover={{ color: 'gray.600' }}\n        {...rest}\n        onClick={callAllHandlers(onClick, (event: any) => {\n          event.stopPropagation()\n          clearSelection()\n          inputRef?.current?.focus()\n        })}\n      >\n        <Icon focusable='false' aria-hidden boxSize='1em' stroke='currentColor'>\n          <path\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            strokeWidth='2'\n            d='M6 18L18 6M6 6l12 12'\n          />\n        </Icon>\n      </chakra.div>\n    )\n  }\n)\n\nexport interface SelectControlProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectControl = forwardRef<SelectControlProps, 'div'>(\n  (props, ref) => {\n    const { isDisabled } = useSelect()\n    const ownProps = useFormControl({ isDisabled, ...props })\n    const styles = useStyles()\n\n    return <chakra.div ref={ref} __css={styles.control} {...ownProps} />\n  }\n)\n\nexport type SelectButtonProps = HTMLChakraProps<'button'> & FormControlOptions\nexport const SelectButton = forwardRef<SelectButtonProps, 'button'>(\n  (props, ref) => {\n    const { onClick } = props\n    const {\n      getToggleButtonProps,\n      inputRef,\n      isDisabled,\n      isOpen,\n      getDropdownProps\n    } = useSelect()\n    const button = useFormControl({ isDisabled, ...props })\n    const styles = useStyles()\n    return (\n      <chakra.button\n        __css={styles.button}\n        ref={ref}\n        {...button}\n        {...getToggleButtonProps({\n          ...getDropdownProps?.({ preventKeyAction: isOpen }),\n          onClick: callAllHandlers(onClick, (event: any) => {\n            event.stopPropagation()\n            inputRef?.current?.focus()\n          })\n        })}\n      />\n    )\n  }\n)\n\nexport interface SelectSearchInputProps extends HTMLChakraProps<'input'> {}\nexport const SelectSearchInput = forwardRef<SelectSearchInputProps, 'input'>(\n  (props, ref) => {\n    const {\n      getInputProps,\n      isDisabled,\n      inputRef,\n      getDropdownProps,\n      selectedItems\n    } = useSelect()\n    const input = useFormControl({ isDisabled, ...props })\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef?.current?.focus()\n      }\n    }))\n    const placeholder =\n      selectedItems && selectedItems.length > 0 ? '' : props.placeholder\n    return (\n      <Fragment>\n        <chakra.div\n          zIndex={1}\n          m={0.5}\n          pb={0.5}\n          pt={0.5}\n          visibility={isDisabled ? 'hidden' : 'visible'}\n        >\n          <SearchInput\n            tabIndex={-1}\n            isDisabled={isDisabled}\n            type='text'\n            autoCapitalize='none'\n            {...input}\n            {...getInputProps({\n              ref: inputRef,\n              ...getDropdownProps?.({\n                placeholder: placeholder,\n                ref: inputRef\n              })\n            })}\n          />\n        </chakra.div>\n      </Fragment>\n    )\n  }\n)\n\nexport type SelectOptionProps<Item = any> = Omit<\n  GetItemPropsOptions<Item>,\n  'item' | 'disabled' | 'value'\n> &\n  Omit<ChakraProps, 'value'> & {\n    value: GetItemPropsOptions<Item>['item']\n    isDisabled?: boolean\n    children: MaybeRenderProp<{\n      isSelected?: boolean\n      isActive?: boolean\n    }>\n  }\n\nexport function SelectOption<Item = any>({\n  children,\n  value,\n  index,\n  isDisabled,\n  ...props\n}: SelectOptionProps<Item>) {\n  const { getItemProps, selectedItem, highlightedIndex } = useSelect()\n  const styles = useStyles()\n  const isSelected = selectedItem === value\n  const isActive = highlightedIndex === index\n  return (\n    <chakra.li\n      bg={isActive ? 'gray.50' : 'white'}\n      data-disabled={dataAttr(isDisabled)}\n      {...getItemProps({\n        item: value,\n        index\n      })}\n      aria-selected={props.isSelected ? 'true' : `${isSelected}`}\n      __css={styles.option}\n      {...props}\n    >\n      {runIfFn(children, {\n        isSelected,\n        isActive\n      })}\n    </chakra.li>\n  )\n}\n\nexport interface SelectMenuListProps extends HTMLChakraProps<'ul'> {}\n\nexport const SelectMenuList = forwardRef<SelectMenuListProps, 'ul'>(\n  (props, ref) => {\n    const { isOpen } = useSelect()\n    const styles = useStyles()\n    if (!isOpen) return null\n    return <chakra.ul ref={ref} __css={styles.list} {...props} />\n  }\n)\n\nexport interface SelectMenuProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectMenu = forwardRef<SelectMenuProps, 'div'>((props, ref) => {\n  const styles = useStyles()\n  const { getMenuProps } = useSelect()\n  return (\n    <chakra.div ref={ref} __css={styles.menu} {...getMenuProps()} {...props} />\n  )\n})\n\nexport type SelectSingleProps<Item = any> = Omit<\n  HTMLChakraProps<'div'>,\n  'onChange' | 'defaultValue'\n> &\n  FormControlOptions &\n  Pick<\n    DownshiftProps<Item>,\n    'itemToString' | 'defaultIsOpen' | 'isOpen' | 'defaultHighlightedIndex'\n  > & {\n    value?: Item | null\n    defaultValue?: Item\n    onChange?(\n      selectedItem: Item | null | undefined,\n      stateAndHelpers?: ControllerStateAndHelpers<Item>\n    ): void\n    children: MaybeRenderProp<{\n      isOpen: boolean\n      highlightedIndex: number | null\n      selectedItem: Item | null\n      onClose?(): void\n      inputValue: string | null\n      getLabelProps: PropGetters<Item>['getLabelProps']\n    }>\n  }\n\nexport function SelectSingle<Item = any>({\n  id,\n  children,\n  isOpen,\n  defaultValue,\n  defaultIsOpen,\n  defaultHighlightedIndex = 0,\n  onChange,\n  itemToString,\n  isDisabled,\n  ...props\n}: SelectSingleProps<Item>) {\n  const styles = useMultiStyleConfig('SelectSingle', {})\n  const inputRef = useRef<HTMLInputElement>(null)\n  return (\n    <Downshift\n      id={id}\n      onChange={onChange}\n      initialSelectedItem={defaultValue}\n      initialIsOpen={defaultIsOpen}\n      isOpen={isOpen}\n      itemToString={itemToString}\n      initialHighlightedIndex={defaultHighlightedIndex}\n    >\n      {(downshift) => (\n        <chakra.div pos='relative' {...props} {...downshift.getRootProps()}>\n          <StylesProvider value={styles}>\n            <SelectProvider value={{ ...downshift, isDisabled, inputRef }}>\n              {runIfFn(children, {\n                inputValue: downshift.inputValue,\n                isOpen: downshift.isOpen,\n                highlightedIndex: downshift.highlightedIndex,\n                selectedItem: downshift.selectedItem,\n                getLabelProps: downshift.getLabelProps\n              })}\n            </SelectProvider>\n          </StylesProvider>\n        </chakra.div>\n      )}\n    </Downshift>\n  )\n}\n","import React, { useCallback, useRef } from 'react'\nimport Downshift, {\n  PropGetters,\n  useMultipleSelection,\n  DownshiftProps,\n  UseMultipleSelectionStateChange,\n  UseMultipleSelectionGetSelectedItemPropsOptions\n} from 'downshift'\nimport {\n  chakra,\n  HTMLChakraProps,\n  StylesProvider,\n  useMultiStyleConfig\n} from '@chakra-ui/system'\nimport { runIfFn } from '@chakra-ui/utils'\nimport { MaybeRenderProp } from '@chakra-ui/react-utils'\nimport { Tag, TagLabel, TagCloseButton, TagProps } from '@chakra-ui/tag'\nimport { FormControlOptions } from '@chakra-ui/form-control'\nimport { useSelect, SelectProvider } from './use-select'\n\nexport type SelectTagProps<\n  Item = any\n> = UseMultipleSelectionGetSelectedItemPropsOptions<Item> & TagProps\n\nexport function SelectedItemTag({\n  children,\n  selectedItem,\n  index,\n  ...props\n}: SelectTagProps) {\n  const { removeSelectedItem, getSelectedItemProps, inputRef } = useSelect()\n  return (\n    <Tag\n      size='sm'\n      m='2px'\n      zIndex={1}\n      {...props}\n      {...getSelectedItemProps?.({ selectedItem, index })}\n    >\n      <TagLabel color='primary' fontWeight='semibold'>\n        {children}\n      </TagLabel>\n      <TagCloseButton\n        cursor='default'\n        _focus={{ outline: 'none' }}\n        onClick={(e) => {\n          e.stopPropagation()\n          removeSelectedItem?.(selectedItem)\n          inputRef.current?.focus()\n        }}\n      />\n    </Tag>\n  )\n}\n\nexport type SelectMultipleProps<Item = any> = Omit<\n  HTMLChakraProps<'div'>,\n  'onChange'\n> &\n  FormControlOptions &\n  Pick<\n    DownshiftProps<Item>,\n    'itemToString' | 'defaultIsOpen' | 'isOpen' | 'defaultHighlightedIndex'\n  > & {\n    initialSelectedItems?: Array<Item>\n    defaultSelectedItems?: Array<Item>\n    value?: Item[] | undefined\n    onChange?: (changes: UseMultipleSelectionStateChange<Item>) => void\n    children: MaybeRenderProp<{\n      isOpen: boolean\n      highlightedIndex: number | null\n      onClose?(): void\n      inputValue: string | null\n      selectedItems: Array<Item>\n      getLabelProps: PropGetters<Item>['getLabelProps']\n    }>\n  }\n\nexport function SelectMultiple<Item = any>({\n  id,\n  children,\n  onChange,\n  initialSelectedItems = [],\n  defaultSelectedItems,\n  itemToString,\n  value,\n  isDisabled,\n  defaultHighlightedIndex = 0,\n  defaultIsOpen,\n  isOpen,\n  ...props\n}: SelectMultipleProps<Item>) {\n  const inputRef = useRef<HTMLInputElement>(null)\n  const styles = useMultiStyleConfig('SelectMultiple', {})\n  const {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    selectedItems\n  } = useMultipleSelection({\n    defaultSelectedItems,\n    initialSelectedItems,\n    onSelectedItemsChange: onChange,\n    ...(value && {\n      selectedItems: value\n    })\n  })\n\n  const getStateAndHelpers = useCallback(\n    (downshift) => {\n      return {\n        ...downshift,\n        selectedItems,\n        getDropdownProps,\n        getSelectedItemProps,\n        removeSelectedItem\n      }\n    },\n    [selectedItems, getDropdownProps, getSelectedItemProps, removeSelectedItem]\n  )\n\n  const stateReducer = useCallback((state, changes) => {\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n      case Downshift.stateChangeTypes.clickItem:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex,\n          isOpen: true,\n          inputValue: ''\n        }\n      default:\n        return changes\n    }\n  }, [])\n\n  const onStateChange = useCallback(\n    ({ type, selectedItem }) => {\n      switch (type) {\n        case Downshift.stateChangeTypes.keyDownEnter:\n        case Downshift.stateChangeTypes.keyDownSpaceButton:\n        case Downshift.stateChangeTypes.clickItem:\n          if (selectedItem) {\n            addSelectedItem(selectedItem as never)\n          }\n          break\n        default:\n          break\n      }\n    },\n    [addSelectedItem]\n  )\n  return (\n    <Downshift\n      id={id}\n      stateReducer={stateReducer}\n      onStateChange={onStateChange}\n      selectedItem={null}\n      itemToString={itemToString}\n      initialHighlightedIndex={defaultHighlightedIndex}\n      initialIsOpen={defaultIsOpen}\n      isOpen={isOpen}\n    >\n      {(downshift) => {\n        const ctx = { ...getStateAndHelpers(downshift), isDisabled, inputRef }\n        return (\n          <chakra.div\n            position='relative'\n            {...props}\n            {...downshift.getRootProps()}\n          >\n            <StylesProvider value={styles}>\n              <SelectProvider value={ctx}>\n                {runIfFn(children, {\n                  inputValue: downshift.inputValue,\n                  isOpen: downshift.isOpen,\n                  highlightedIndex: downshift.highlightedIndex,\n                  selectedItems,\n                  getLabelProps: downshift.getLabelProps\n                })}\n              </SelectProvider>\n            </StylesProvider>\n          </chakra.div>\n        )\n      }}\n    </Downshift>\n  )\n}\n","import React, { Fragment } from 'react'\nimport Icon from '@chakra-ui/icon'\nimport { chakra } from '@chakra-ui/system'\nimport {\n  ArrowIndicator,\n  SelectButton,\n  SelectControl,\n  SelectSearchInput,\n  SelectValueContainer,\n  SelectMenu,\n  SelectMenuList,\n  SelectOption,\n  SelectMultiple,\n  SelectMultipleProps,\n  SelectedItemTag\n} from 'chakra-ui-select'\nimport { DownshiftProps } from 'downshift'\nimport { FormControlOptions, FormLabel } from '@chakra-ui/form-control'\n\ninterface Option {\n  value: string\n  label: string\n}\n\ninterface FilterOptionArgs<Item> {\n  items: Item[]\n  selectedItems: Item[]\n  getOptionLabel: (item: Item | null) => string\n  inputValue: string | null\n}\n\nfunction defaultFilterOption<Item>({\n  items,\n  inputValue,\n  selectedItems,\n  getOptionLabel\n}: FilterOptionArgs<Item>): Item[] {\n  return items.filter((item) => {\n    if (inputValue) {\n      return (\n        selectedItems.indexOf(item) < 0 &&\n        getOptionLabel(item).toLowerCase().startsWith(inputValue.toLowerCase())\n      )\n    }\n    return selectedItems.indexOf(item) < 0\n  })\n}\n\nexport type SelectMutipleWrapperProps<Item> = FormControlOptions &\n  Pick<SelectMultipleProps<Item>, 'value' | 'onChange' | 'defaultValue'> & {\n    options: Item[]\n    label?: string\n    placeholder?: string\n    isSearchable?: boolean\n    noOptionsMessage?(inputValue: string | null): string | null | undefined\n    getOptionLabel?: DownshiftProps<Item>['itemToString']\n    getOptionKey?: (item: Item) => string\n    filterOption?(args: FilterOptionArgs<Item>): Item[]\n  }\n\nexport function SelectMultipleWrapper<Item = Option>({\n  options,\n  getOptionLabel = (i) => (i === null ? '' : ((i as unknown) as Option).label),\n  getOptionKey = (i) => (i === null ? '' : ((i as unknown) as Option).value),\n  filterOption = defaultFilterOption,\n  placeholder,\n  isSearchable,\n  value,\n  onChange,\n  isDisabled,\n  label,\n  noOptionsMessage = () => 'No options'\n}: SelectMutipleWrapperProps<Item>) {\n  return (\n    <SelectMultiple\n      isDisabled={isDisabled}\n      itemToString={getOptionLabel}\n      value={value}\n      onChange={onChange}\n    >\n      {({ selectedItems, inputValue, getLabelProps }) => {\n        const showPlaceholder =\n          selectedItems.length <= 0 && !isSearchable && !!placeholder\n        const items = filterOption({\n          items: options,\n          selectedItems,\n          inputValue,\n          getOptionLabel\n        })\n        const noOptionsMsg = noOptionsMessage(inputValue)\n        const showNoOptionsMsg = items.length <= 0 && !!noOptionsMsg\n        return (\n          <Fragment>\n            {!!label && <FormLabel {...getLabelProps()}>{label}</FormLabel>}\n            <SelectControl>\n              <SelectValueContainer>\n                {selectedItems?.map((selectedItem, index) => (\n                  <SelectedItemTag\n                    key={`legal_practice-item-${index}`}\n                    index={index}\n                    selectedItem={selectedItem}\n                  >\n                    {getOptionLabel(selectedItem)}\n                  </SelectedItemTag>\n                ))}\n                {isSearchable && (\n                  <SelectSearchInput placeholder={placeholder} />\n                )}\n                {showPlaceholder && (\n                  <chakra.span color='gray.400' fontWeight='normal'>\n                    {placeholder}\n                  </chakra.span>\n                )}\n              </SelectValueContainer>\n              <SelectButton aria-label='toggle menu'>\n                <ArrowIndicator>\n                  <Icon\n                    aria-hidden\n                    boxSize='1em'\n                    fill='none'\n                    stroke='currentColor'\n                    viewBox='0 0 24 24'\n                    xmlns='http://www.w3.org/2000/svg'\n                  >\n                    <path\n                      strokeLinecap='round'\n                      strokeLinejoin='round'\n                      strokeWidth='2'\n                      d='M19 9l-7 7-7-7'\n                    />\n                  </Icon>\n                </ArrowIndicator>\n              </SelectButton>\n            </SelectControl>\n            <SelectMenu>\n              <SelectMenuList>\n                {items.map((option, index) => {\n                  const key = getOptionKey(option)\n                  const label = getOptionLabel(option)\n                  return (\n                    <SelectOption\n                      key={JSON.stringify(key)}\n                      value={option}\n                      index={index}\n                    >\n                      {label}\n                    </SelectOption>\n                  )\n                })}\n                {showNoOptionsMsg && (\n                  <chakra.div py={2} pl={3} pr={9} color='gray.900'>\n                    {noOptionsMsg}\n                  </chakra.div>\n                )}\n              </SelectMenuList>\n            </SelectMenu>\n          </Fragment>\n        )\n      }}\n    </SelectMultiple>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  chakra,\n  ChakraProvider,\n  extendTheme,\n  FormControl,\n  FormLabel,\n  Icon\n} from '@chakra-ui/react'\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport { matchSorter } from 'match-sorter'\n\nimport {\n  theme as selectTheme,\n  SelectSingle,\n  SelectControl,\n  SelectMenu,\n  SelectMenuList,\n  SelectOption,\n  SelectSearchInput,\n  ArrowIndicator,\n  SelectButton,\n  SelectValueContainer,\n  SelectMultiple,\n  SelectedItemTag\n} from 'chakra-ui-select'\nimport { SelectMultipleWrapper } from './components/SelectMultipleWrapper'\n\nconst theme = extendTheme({\n  components: {\n    SelectSingle: selectTheme.SelectSingle,\n    SelectMultiple: selectTheme.SelectMultiple\n  }\n})\n\nconst fruits = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'pear', label: 'Pear' },\n  { value: 'orange', label: 'Orange' },\n  { value: 'grape', label: 'Grape' },\n  { value: 'banana', label: 'Banana' }\n]\n\nconst fruitValues = fruits.map((item) => item.value)\n\ntype Option = {\n  value: string\n  label: string\n}\n\nconst itemToString = (item: Option | null) => item?.label ?? ''\n\nconst App = () => {\n  const [selected, setSelected] = useState<Option | null | undefined>()\n\n  return (\n    <ChakraProvider theme={theme}>\n      <chakra.div my={4} maxW='lg' mx='auto'>\n        <SelectSingle my={4}>\n          {({ selectedItem }) => {\n            return (\n              <>\n                <SelectControl>\n                  <SelectValueContainer>\n                    <chakra.span d='block' isTruncated>\n                      {selectedItem ?? 'Select'}\n                    </chakra.span>\n                  </SelectValueContainer>\n                  <SelectButton>\n                    <ArrowIndicator>\n                      <Icon\n                        aria-hidden\n                        boxSize='1em'\n                        fill='none'\n                        stroke='currentColor'\n                        viewBox='0 0 24 24'\n                        xmlns='http://www.w3.org/2000/svg'\n                      >\n                        <path\n                          strokeLinecap='round'\n                          strokeLinejoin='round'\n                          strokeWidth='2'\n                          d='M19 9l-7 7-7-7'\n                        />\n                      </Icon>\n                    </ArrowIndicator>\n                  </SelectButton>\n                </SelectControl>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {fruitValues.map((option, index) => (\n                      <SelectOption key={option} value={option} index={index}>\n                        {option}\n                      </SelectOption>\n                    ))}\n                  </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </SelectSingle>\n\n        <SelectSingle\n          my={4}\n          isDisabled\n          itemToString={itemToString}\n          defaultValue={fruits[3]}\n        >\n          {({ selectedItem }) => (\n            <>\n              <SelectControl>\n                <SelectValueContainer>\n                  {itemToString(selectedItem)}\n                </SelectValueContainer>\n                <SelectButton aria-label='toggle menu'>\n                  <ArrowIndicator>\n                    <Icon as={ChevronDownIcon} boxSize='1em' />\n                  </ArrowIndicator>\n                </SelectButton>\n              </SelectControl>\n              <SelectMenu>\n                <SelectMenuList>\n                  {fruits.map((option, index) => (\n                    <SelectOption\n                      key={option.value}\n                      value={option}\n                      index={index}\n                    >\n                      {itemToString(option)}\n                    </SelectOption>\n                  ))}\n                </SelectMenuList>\n              </SelectMenu>\n            </>\n          )}\n        </SelectSingle>\n\n        <SelectSingle\n          my={4}\n          itemToString={itemToString}\n          value={selected}\n          onChange={(changes) => setSelected(changes)}\n          defaultHighlightedIndex={3}\n        >\n          {({ inputValue }) => {\n            const getFilteredItems = (items: Option[]) => {\n              return matchSorter(items, inputValue ?? '', { keys: ['label'] })\n            }\n            const items = getFilteredItems(fruits)\n            return (\n              <>\n                <SelectControl>\n                  <SelectValueContainer>\n                    <SelectSearchInput placeholder='Select' />\n                  </SelectValueContainer>\n                  <SelectButton aria-label='toggle menu'>\n                    <ArrowIndicator>\n                      <Icon as={ChevronDownIcon} />\n                    </ArrowIndicator>\n                  </SelectButton>\n                </SelectControl>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {items.map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        value={option}\n                        index={index}\n                      >\n                        {itemToString(option)}\n                      </SelectOption>\n                    ))}\n                    {items.length <= 0 && (\n                      <chakra.div py={2} pl={3} pr={9}>\n                        No found\n                      </chakra.div>\n                    )}\n                  </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </SelectSingle>\n\n        <SelectSingle my={4} itemToString={itemToString}>\n          {({ inputValue, getLabelProps }) => {\n            const getFilteredItems = (items: Option[]) => {\n              return matchSorter(items, inputValue ?? '', { keys: ['label'] })\n            }\n            const items = getFilteredItems(fruits)\n            return (\n              <FormControl>\n                <FormLabel {...getLabelProps()}>Select a fruit</FormLabel>\n                <SelectControl>\n                  <SelectValueContainer>\n                    <SelectSearchInput placeholder='Select' />\n                  </SelectValueContainer>\n                  <SelectButton aria-label='toggle menu'>\n                    <ArrowIndicator>\n                      <Icon as={ChevronDownIcon} boxSize='1em' />\n                    </ArrowIndicator>\n                  </SelectButton>\n                </SelectControl>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {items.map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        value={option}\n                        index={index}\n                      >\n                        {itemToString(option)}\n                      </SelectOption>\n                    ))}\n                    {items.length <= 0 && (\n                      <chakra.div py={2} pl={3} pr={9}>\n                        No found\n                      </chakra.div>\n                    )}\n                  </SelectMenuList>\n                </SelectMenu>\n              </FormControl>\n            )\n          }}\n        </SelectSingle>\n\n        <FormControl>\n          <SelectMultiple my={4} w='full' itemToString={itemToString}>\n            {({ selectedItems, inputValue, getLabelProps }) => {\n              const getFilteredItems = (items: Option[]) => {\n                return items.filter((item: Option) => {\n                  if (inputValue) {\n                    return (\n                      selectedItems.indexOf(item) < 0 &&\n                      itemToString(item)\n                        .toLowerCase()\n                        .startsWith(inputValue.toLowerCase())\n                    )\n                  }\n                  return selectedItems.indexOf(item) < 0\n                })\n              }\n              const items = getFilteredItems(fruits)\n              return (\n                <>\n                  <FormLabel {...getLabelProps()}>Multi</FormLabel>\n                  <SelectControl>\n                    <SelectValueContainer>\n                      {selectedItems?.map((selectedItem, index) => (\n                        <SelectedItemTag\n                          key={`issues-item-${index}`}\n                          index={index}\n                          selectedItem={selectedItem}\n                        >\n                          {selectedItem.label}\n                        </SelectedItemTag>\n                      ))}\n                      <SelectSearchInput placeholder='Select' />\n                    </SelectValueContainer>\n                    <SelectButton aria-label='toggle menu'>\n                      <ArrowIndicator>\n                        <Icon as={ChevronDownIcon} boxSize='1em' />\n                      </ArrowIndicator>\n                    </SelectButton>\n                  </SelectControl>\n                  <SelectMenu>\n                    <SelectMenuList>\n                      {items.map((option, index) => (\n                        <SelectOption\n                          key={option.value}\n                          value={option}\n                          index={index}\n                        >\n                          {option.label}\n                        </SelectOption>\n                      ))}\n                      {items.length <= 0 && (\n                        <chakra.div py={2} pl={3} pr={9}>\n                          No found\n                        </chakra.div>\n                      )}\n                    </SelectMenuList>\n                  </SelectMenu>\n                </>\n              )\n            }}\n          </SelectMultiple>\n        </FormControl>\n\n        <SelectMultipleWrapper options={fruits} placeholder='Select' />\n      </chakra.div>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}