{"version":3,"sources":["../../src/theme.ts","../../src/use-select.ts","../../src/select.tsx","App.tsx","index.tsx"],"names":["baseStyleMenu","props","pos","mt","w","rounded","bg","mode","zIndex","boxShadow","baseStyleList","minW","py","fontSize","overflow","borderRadius","border","borderColor","_focus","outline","baseStyleOption","pl","pr","color","userSelect","cursor","fontWeight","transition","_active","_expanded","_selected","_disabled","opacity","baseStyleControl","theme","position","shadow","textAlign","getColor","_readOnly","baseStyleLabel","d","parts","baseStyle","menu","list","option","control","label","createContext","strict","name","SelectProvider","useSelect","SelectLabel","forwardRef","styles","useStyles","React","chakra","ref","__css","SelectIndicator","children","flexShrink","alignItems","alignSelf","as","insetY","right","display","pointerEvents","SelectControl","getToggleButtonProps","SelectOption","value","index","isDisabled","getItemProps","selectedItem","highlightedIndex","isSelected","isActive","dataAttr","item","runIfFn","SelectMenuList","getMenuProps","isOpen","base","sm","SelectMenu","Select","defaultIsOpen","onChange","itemToString","useMultiStyleConfig","downshift","extendTheme","components","selectTheme","fruits","fruitValues","map","App","useState","selected","setSelected","div","my","maxW","mx","ChevronDownIcon","key","changes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd480634.chunk.js","sourcesContent":["import { getColor, mode } from '@chakra-ui/theme-tools'\n\nconst parts = ['control', 'menu', 'list', 'option', 'label']\n\ntype Dict = Record<string, any>\n\nfunction baseStyleMenu(props: Dict) {\n  return {\n    pos: 'absolute',\n    mt: 1,\n    w: 'full',\n    rounded: 'md',\n    bg: mode(`#fff`, `gray.700`)(props),\n    zIndex: 1,\n    boxShadow: mode(`lg`, `dark-lg`)(props)\n  }\n}\n\nconst baseStyleList = {\n  minW: 60,\n  py: 1,\n  fontSize: 'base',\n  overflow: 'auto',\n  borderRadius: 'md',\n  border: '1px',\n  borderColor: 'gray.50',\n  _focus: { outline: 'none' }\n}\n\nfunction baseStyleOption(props: Dict) {\n  return {\n    py: 2,\n    pl: 3,\n    pr: 9,\n    color: mode(`gray.900`, `gray.50`)(props),\n    pos: 'relative',\n    userSelect: 'none',\n    cursor: 'default',\n    fontWeight: 'normal',\n    transition: 'background 50ms ease-in 0s',\n    _focus: {\n      bg: mode(`gray.100`, `whiteAlpha.100`)(props)\n    },\n    _active: {\n      bg: mode(`gray.100`, `whiteAlpha.200`)(props)\n    },\n    _expanded: {\n      bg: mode(`gray.100`, `whitxeAlpha.100`)(props)\n    },\n    _selected: {\n      bg: 'gray.50',\n      fontWeight: 'semibold'\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    }\n  }\n}\n\nfunction baseStyleControl(props: Dict) {\n  const { theme } = props\n  return {\n    bg: 'white',\n    position: 'relative',\n    w: 'full',\n    border: '1px',\n    borderColor: 'gray.300',\n    rounded: 'md',\n    shadow: 'base',\n    pl: 3,\n    pr: 10,\n    py: 2,\n    textAlign: 'left',\n    cursor: 'default',\n    _focus: {\n      outline: 'none',\n      borderColor: 'gray.400',\n      boxShadow: `0 0 0 1px ${getColor(theme, 'gray.400')}`\n    },\n    _readOnly: { boxShadow: 'none !important', userSelect: 'all' },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    }\n  }\n}\n\nfunction baseStyleLabel(props: Dict) {\n  return {\n    d: 'block',\n    fontSize: 'sm',\n    fontWeight: 'medium',\n    color: mode(`gray.700`, `gray.50`)(props)\n  }\n}\n\nconst baseStyle = (props: Dict) => ({\n  menu: baseStyleMenu(props),\n  list: baseStyleList,\n  option: baseStyleOption(props),\n  control: baseStyleControl(props),\n  label: baseStyleLabel(props)\n})\n\nexport default {\n  parts,\n  baseStyle\n}\n","import {\n  ControllerStateAndHelpers,\n  UseMultipleSelectionReturnValue\n} from 'downshift'\nimport { createContext } from '@chakra-ui/utils'\n\ntype SelectContext<Item = any> = ControllerStateAndHelpers<Item> &\n  Partial<UseMultipleSelectionReturnValue<Item>>\nconst [SelectProvider, useSelect] = createContext<SelectContext>({\n  strict: false,\n  name: 'DownshiftContext'\n})\n\nexport { SelectProvider, useSelect }\n","import React from 'react'\nimport {\n  chakra,\n  ChakraProps,\n  HTMLChakraProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef\n} from '@chakra-ui/system'\nimport { dataAttr, MaybeRenderProp, runIfFn } from '@chakra-ui/utils'\nimport Downshift, {\n  ControllerStateAndHelpers,\n  DownshiftProps,\n  GetItemPropsOptions\n} from 'downshift'\nimport { SelectProvider, useSelect } from './use-select'\n\nexport interface SelectLabelProps extends HTMLChakraProps<'span'> {}\n\nexport const SelectLabel = forwardRef<SelectLabelProps, 'span'>(\n  (props, ref) => {\n    const styles = useStyles()\n    return <chakra.span ref={ref} __css={styles.label} {...props} />\n  }\n)\n\nexport interface SelectIndicatorProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectIndicator = forwardRef<SelectIndicatorProps, 'div'>(\n  ({ children, ...props }, ref) => {\n    return (\n      <chakra.div\n        ref={ref}\n        d='flex'\n        flexShrink={0}\n        alignItems='center'\n        alignSelf='stretch'\n        {...props}\n      >\n        <chakra.div\n          as='span'\n          position='absolute'\n          insetY={0}\n          right={0}\n          display='flex'\n          alignItems='center'\n          pr={2}\n          pointerEvents='none'\n        >\n          {children}\n        </chakra.div>\n      </chakra.div>\n    )\n  }\n)\n\nexport interface SelectControlProps extends HTMLChakraProps<'button'> {}\n\nexport const SelectControl = forwardRef<SelectControlProps, 'button'>(\n  (props, ref) => {\n    const { getToggleButtonProps } = useSelect()\n    const styles = useStyles()\n\n    return (\n      <chakra.button\n        ref={ref}\n        __css={styles.control}\n        {...getToggleButtonProps()}\n        {...props}\n      />\n    )\n  }\n)\n\nexport type SelectOptionProps<Item = any> = Omit<\n  GetItemPropsOptions<Item>,\n  'item' | 'disabled' | 'value'\n> &\n  Omit<ChakraProps, 'value'> & {\n    value: GetItemPropsOptions<Item>['item']\n    isDisabled?: boolean\n    children: MaybeRenderProp<{\n      isSelected?: boolean\n      isActive?: boolean\n    }>\n  }\n\nexport function SelectOption<Item = any>({\n  children,\n  value,\n  index,\n  isDisabled,\n  ...props\n}: SelectOptionProps<Item>) {\n  const { getItemProps, selectedItem, highlightedIndex } = useSelect()\n  const styles = useStyles()\n  const isSelected = selectedItem === value\n  const isActive = highlightedIndex === index\n  return (\n    <chakra.li\n      bg={isActive ? 'gray.50' : 'white'}\n      data-disabled={dataAttr(isDisabled)}\n      {...getItemProps({\n        item: value,\n        index\n      })}\n      aria-selected={props.isSelected ? 'true' : `${isSelected}`}\n      __css={styles.option}\n      {...props}\n    >\n      {runIfFn(children, {\n        isSelected,\n        isActive\n      })}\n    </chakra.li>\n  )\n}\n\nexport interface SelectMenuListProps extends HTMLChakraProps<'ul'> {}\n\nexport const SelectMenuList = forwardRef<SelectMenuListProps, 'ul'>(\n  ({ children, ...props }, ref) => {\n    const { getMenuProps, isOpen } = useSelect()\n    const styles = useStyles()\n\n    if (!isOpen) return null\n\n    return (\n      <chakra.ul\n        ref={ref}\n        __css={{\n          ...styles.list,\n          fontSize: { base: 'base', sm: 'sm' }\n        }}\n        {...getMenuProps()}\n        {...props}\n      >\n        {isOpen && children}\n      </chakra.ul>\n    )\n  }\n)\n\nexport interface SelectMenuProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectMenu = forwardRef<SelectMenuProps, 'div'>((props, ref) => {\n  const styles = useStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      __css={{\n        pos: 'absolute',\n        ...styles.menu\n      }}\n      {...props}\n    />\n  )\n})\n\nexport type SelectProps<Item = any> = Omit<ChakraProps, 'onChange'> &\n  Pick<DownshiftProps<Item>, 'itemToString' | 'defaultIsOpen'> & {\n    isOpen?: boolean\n    defaultHighlightedIndex?: number\n    defaultValue?: Item\n    value?: Item\n    onChange?(\n      selectedItem: Item | null,\n      stateAndHelpers?: ControllerStateAndHelpers<Item>\n    ): void\n    children: MaybeRenderProp<{\n      isOpen: boolean\n      highlightedIndex: number | null\n      selectedItem: Item | null\n      onClose?(): void\n    }>\n  }\n\nexport function Select<Item = any>({\n  children,\n  defaultValue,\n  defaultIsOpen,\n  onChange,\n  itemToString,\n  ...props\n}: SelectProps<Item>) {\n  const styles = useMultiStyleConfig('Select', {})\n  return (\n    <Downshift\n      onChange={onChange}\n      defaultIsOpen={defaultIsOpen}\n      itemToString={itemToString}\n    >\n      {(downshift) => (\n        <chakra.div pos='relative' {...props} {...downshift.getRootProps()}>\n          <StylesProvider value={styles}>\n            <SelectProvider value={downshift}>\n              {runIfFn(children, {\n                isOpen: downshift.isOpen,\n                highlightedIndex: downshift.highlightedIndex,\n                selectedItem: downshift.selectedItem\n              })}\n            </SelectProvider>\n          </StylesProvider>\n        </chakra.div>\n      )}\n    </Downshift>\n  )\n}\n","import React, { useState } from 'react'\nimport { chakra, ChakraProvider, extendTheme, Icon } from \"@chakra-ui/react\"\nimport { ChevronDownIcon } from '@chakra-ui/icons';\n\nimport {\n  theme as selectTheme,\n  Select,\n  SelectControl,\n  SelectLabel,\n  SelectIndicator,\n  SelectMenu,\n  SelectMenuList,\n  SelectOption,\n} from 'chakra-ui-select'\n\nconst theme = extendTheme({\n  components: {\n    Select: selectTheme\n  }\n})\n\nconst fruits = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'pear', label: 'Pear' },\n  { value: 'orange', label: 'Orange' },\n  { value: 'grape', label: 'Grape' },\n  { value: 'banana', label: 'Banana' },\n];\n\nconst fruitValues = fruits.map(item => item.value)\n\ntype Option = {\n  value: string\n  label: string\n}\n\nconst App = () => {\n  const [selected, setSelected] = useState<Option | null>()\n  return (\n    <ChakraProvider theme={theme}>\n      <chakra.div my={4} maxW=\"lg\" mx=\"auto\">\n        <Select my={4}>\n          {({ selectedItem }) => {\n            return (\n              <>\n              <SelectControl>\n                <SelectLabel>{selectedItem ?? 'Select'}</SelectLabel>\n                <SelectIndicator>\n                  <Icon as={ChevronDownIcon} />\n                </SelectIndicator>\n              </SelectControl>\n              <SelectMenu zIndex={10}>\n                <SelectMenuList>\n                  {fruitValues.map((option, index) => (\n                    <SelectOption\n                      key={option}\n                      value={option}\n                      index={index}\n                    >\n                      {option}\n                    </SelectOption>\n                  ))}\n                </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </Select>\n\n\n        <Select my={4} itemToString={(item) => item?.label ?? 'Select'}>\n          {({ selectedItem }) => {\n            return (\n              <>\n              <SelectControl>\n                <SelectLabel>{selectedItem?.label ?? 'Select'}</SelectLabel>\n                <SelectIndicator>\n                  <Icon as={ChevronDownIcon} />\n                </SelectIndicator>\n              </SelectControl>\n              <SelectMenu zIndex={10}>\n                <SelectMenuList>\n                  {fruits.map((option, index) => (\n                    <SelectOption\n                      key={option.value}\n                      value={option}\n                      index={index}\n                    >\n                      {option.label}\n                    </SelectOption>\n                  ))}\n                </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </Select>\n\n        <Select\n          my={4}\n          value={selected}\n          onChange={(changes) => setSelected(changes)}\n          itemToString={(item) => item?.label ?? 'Select'}\n        >\n          <SelectControl>\n            <SelectLabel>{selected?.label ?? 'Select'}</SelectLabel>\n            <SelectIndicator>\n              <Icon as={ChevronDownIcon} />\n            </SelectIndicator>\n          </SelectControl>\n          <SelectMenu zIndex={10}>\n            <SelectMenuList>\n              {fruits.map((option, index) => (\n                <SelectOption\n                  key={option.value}\n                  value={option}\n                  index={index}\n                >\n                  {option.label}\n                </SelectOption>\n              ))}\n            </SelectMenuList>\n          </SelectMenu>\n        </Select>\n\n        {/* <SelectMultiple\n          w=\"full\"\n          // value={[]}\n          // onChange={(changes) => console.log('changes', changes)}\n          itemToString={(item: any) =>\n            item?.label ?? \"label\"\n          }\n        >\n          {({ selectedItems, getFilteredItems }) => {\n            return (\n              <>\n                <SelectMultipleControl>\n                  {selectedItems?.length ? (\n                    <SelectedList>\n                      {selectedItems?.map((selectedItem, index) => (\n                        <SelectedItemTag\n                          key={`issues-item-${index}`}\n                          index={index}\n                          selectedItem={selectedItem}\n                        >\n                          {selectedItem.label}\n                        </SelectedItemTag>\n                      ))}\n                    </SelectedList>\n                  ) : (\n                    <span>\n                      label\n                    </span>\n                  )}\n                  <SelectIndicator>\n                    <Icon as={ChevronDownIcon} />\n                  </SelectIndicator>\n                </SelectMultipleControl>\n                <SelectMenu zIndex={10}>\n                  <SelectMenuList>\n                    {getFilteredItems(fruits).map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        value={option}\n                        index={index}\n                      >\n                        {option.label}\n                      </SelectOption>\n                    ))}\n                  </SelectMenuList>\n                </SelectMenu>\n              </>\n            );\n          }}\n        </SelectMultiple> */}\n      </chakra.div>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}