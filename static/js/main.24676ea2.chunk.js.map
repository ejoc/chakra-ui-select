{"version":3,"sources":["../../src/theme.ts","../../src/search-input.tsx","../../src/use-select.ts","../../src/select.tsx","App.tsx","index.tsx"],"names":["baseStyleMenu","props","pos","mt","w","rounded","bg","mode","zIndex","boxShadow","baseStyleList","minW","py","fontSize","overflow","borderRadius","border","borderColor","_focus","outline","baseStyleOption","pl","pr","color","userSelect","cursor","fontWeight","transition","_active","_expanded","_selected","_disabled","opacity","baseStyleControl","theme","position","shadow","textAlign","display","alignItems","flexWrap","justifyContent","minH","_focusWithin","getColor","_readOnly","_hover","baseStyleLabel","d","parts","baseStyle","menu","list","option","control","label","sizerStyle","top","left","visibility","height","whiteSpace","copyStyles","node","styles","SearchInput","forwardRef","wrapperStyle","className","placeholder","minWidth","placeholderIsMinWidth","isDisabled","inputProps","useState","inputWidth","setInputWidth","inputRef","useRef","sizerRef","placeHolderSizerRef","_className","cx","sizerValue","useImperativeHandle","ref","focus","useEffect","copyInputStyles","newInputWidth","Math","parseInt","window","inputNode","inputStyles","_wrapperStyle","_inputProps","padding","boxSizing","background","maxW","chakra","sx","createContext","strict","name","SelectProvider","useSelect","SelectValue","React","SelectIndicator","children","flexShrink","alignSelf","insetY","right","ArrowIndicator","as","pointerEvents","SelectClearIndicator","onClick","rest","selectedItem","clearSelection","tabIndex","callAllHandlers","event","focusable","h","fill","SelectControl","getToggleButtonProps","useStyles","disabled","__css","SelectAutocomplete","dataAttr","SelectButton","inset","SelectSearchInput","getInputProps","itemToString","textOverflow","m","pb","pt","type","autoCapitalize","SelectOption","value","index","getItemProps","highlightedIndex","isSelected","isActive","item","runIfFn","SelectMenuList","getMenuProps","base","sm","SelectMenu","isOpen","Select","defaultValue","defaultIsOpen","onChange","useMultiStyleConfig","initialSelectedItem","downshift","inputValue","getLabelProps","extendTheme","components","SelectSingle","selectTheme","Autocomplete","fruits","fruitValues","map","App","selected","setSelected","div","my","mx","ChevronDownIcon","key","changes","aria-label","items","matchSorter","keys","getFilteredItems","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24676ea2.chunk.js","sourcesContent":["import { getColor, mode } from '@chakra-ui/theme-tools'\n\nconst parts = ['control', 'menu', 'list', 'option', 'label']\n\ntype Dict = Record<string, any>\n\nfunction baseStyleMenu(props: Dict) {\n  return {\n    pos: 'absolute',\n    mt: 1,\n    w: 'full',\n    rounded: 'md',\n    bg: mode(`#fff`, `gray.700`)(props),\n    zIndex: 2,\n    boxShadow: mode(`lg`, `dark-lg`)(props)\n  }\n}\n\nconst baseStyleList = {\n  minW: 60,\n  py: 1,\n  fontSize: 'base',\n  overflow: 'auto',\n  borderRadius: 'md',\n  border: '1px',\n  borderColor: 'gray.50',\n  _focus: { outline: 'none' }\n}\n\nfunction baseStyleOption(props: Dict) {\n  return {\n    py: 2,\n    pl: 3,\n    pr: 9,\n    color: mode(`gray.900`, `gray.50`)(props),\n    pos: 'relative',\n    userSelect: 'none',\n    cursor: 'default',\n    fontWeight: 'normal',\n    transition: 'background 50ms ease-in 0s',\n    _focus: {\n      bg: mode(`gray.100`, `whiteAlpha.100`)(props)\n    },\n    _active: {\n      bg: mode(`gray.100`, `whiteAlpha.200`)(props)\n    },\n    _expanded: {\n      bg: mode(`gray.100`, `whitxeAlpha.100`)(props)\n    },\n    _selected: {\n      bg: 'gray.50',\n      fontWeight: 'semibold'\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    }\n  }\n}\n\nfunction baseStyleControl(props: Dict) {\n  const { theme } = props\n  return {\n    bg: 'white',\n    position: 'relative',\n    w: 'full',\n    border: '1px',\n    borderColor: 'gray.300',\n    rounded: 'md',\n    shadow: 'base',\n    textAlign: 'left',\n    cursor: 'default',\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    minH: 10,\n    transition: 'ease-in-out',\n    outline: 'none',\n    _focusWithin: {\n      outline: 'none',\n      borderColor: 'gray.400',\n      boxShadow: `0 0 0 1px ${getColor(theme, 'gray.400')}`\n    },\n    _focus: {\n      outline: 'none',\n      borderColor: 'gray.400',\n      boxShadow: `0 0 0 1px ${getColor(theme, 'gray.400')}`\n    },\n    _readOnly: { boxShadow: 'none !important', userSelect: 'all' },\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    },\n    _hover: {\n      borderColor: 'gray.400',\n      _disabled: {\n        borderColor: 'gray.300'\n      }\n    }\n  }\n}\n\nfunction baseStyleLabel(props: Dict) {\n  return {\n    d: 'block',\n    fontSize: 'sm',\n    fontWeight: 'medium',\n    color: mode(`gray.700`, `gray.50`)(props)\n  }\n}\n\nconst baseStyle = (props: Dict) => ({\n  menu: baseStyleMenu(props),\n  list: baseStyleList,\n  option: baseStyleOption(props),\n  control: baseStyleControl(props),\n  label: baseStyleLabel(props)\n})\n\nexport default {\n  parts,\n  baseStyle\n}\n","import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\nimport { chakra, forwardRef, HTMLChakraProps } from '@chakra-ui/system'\nimport { cx } from '@chakra-ui/utils'\n\nexport interface SearchInputProps extends HTMLChakraProps<'input'> {\n  wrapperStyle?: HTMLChakraProps<'div'>\n  className?: string\n  placeholderIsMinWidth?: boolean\n  extraWidth?: string | number\n  isDisabled?: boolean\n}\n\nconst sizerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'scroll',\n  whiteSpace: 'pre'\n}\n\nconst copyStyles = (\n  styles: CSSStyleDeclaration,\n  node: any\n  // node: MutableRefObject<HTMLChakraProps<'div'>>\n) => {\n  node.style.fontSize = styles.fontSize\n  node.style.fontFamily = styles.fontFamily\n  node.style.fontWeight = styles.fontWeight\n  node.style.fontStyle = styles.fontStyle\n  node.style.letterSpacing = styles.letterSpacing\n  node.style.textTransform = styles.textTransform\n}\n\nexport const SearchInput = forwardRef<SearchInputProps, 'input'>(\n  (props, ref) => {\n    const {\n      wrapperStyle,\n      className,\n      placeholder,\n      minWidth,\n      placeholderIsMinWidth,\n      isDisabled,\n      ...inputProps\n    } = props\n    const [inputWidth, setInputWidth] = useState(minWidth)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const sizerRef = useRef<HTMLDivElement>(null)\n    const placeHolderSizerRef = useRef<HTMLDivElement>(null)\n    const _className = cx('chakra-select__search-input', className)\n    const sizerValue = props.defaultValue || props.value || ''\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef?.current?.focus()\n      }\n    }))\n\n    useEffect(() => {\n      copyInputStyles()\n    }, [])\n\n    useEffect(() => {\n      if (!sizerRef || typeof sizerRef.current?.scrollWidth === 'undefined') {\n        return\n      }\n\n      let newInputWidth\n      if (\n        props.placeholder &&\n        (!props.value || (props.value && placeholderIsMinWidth))\n      ) {\n        newInputWidth =\n          Math.max(\n            sizerRef.current.scrollWidth,\n            placeHolderSizerRef.current?.scrollWidth as number\n          ) + 2\n      } else {\n        newInputWidth = sizerRef.current?.scrollWidth + 2\n      }\n\n      const extraWidth =\n        props.type === 'number' && props.extraWidth === undefined\n          ? 16\n          : parseInt(props.extraWidth as string) || 0\n      newInputWidth += extraWidth\n\n      if (minWidth && newInputWidth < minWidth) {\n        newInputWidth = minWidth\n      }\n      if (newInputWidth !== inputWidth) {\n        setInputWidth(newInputWidth)\n      }\n    }, [sizerValue])\n\n    const copyInputStyles = () => {\n      if (!window.getComputedStyle || !inputRef?.current) {\n        return\n      }\n      const inputNode = inputRef.current\n      const inputStyles = inputNode && window.getComputedStyle(inputNode)\n      if (!inputStyles) {\n        return\n      }\n      copyStyles(inputStyles, sizerRef.current)\n      if (placeHolderSizerRef.current) {\n        copyStyles(inputStyles, placeHolderSizerRef.current)\n      }\n    }\n\n    const _wrapperStyle = {\n      d: 'inline-block',\n      visibility: isDisabled ? 'hidden' : 'visible',\n      color: 'gray.800',\n      w: '100%',\n      ...wrapperStyle\n    } as HTMLChakraProps<'div'>\n\n    const _inputProps = {\n      w: `${inputWidth}px`,\n      border: 0,\n      fontSize: 'inherit',\n      outline: 0,\n      padding: 0,\n      color: 'inherit',\n      boxSizing: 'content-box',\n      background: '0px center',\n      maxW: '100%',\n      ...inputProps\n    } as HTMLChakraProps<'input'>\n\n    return (\n      <chakra.div className={_className} {..._wrapperStyle}>\n        <chakra.input\n          placeholder={placeholder}\n          {..._inputProps}\n          ref={inputRef}\n        />\n        <chakra.div ref={sizerRef} sx={sizerStyle}>\n          {sizerValue}\n        </chakra.div>\n        {placeholder && (\n          <chakra.div ref={placeHolderSizerRef} sx={sizerStyle}>\n            {placeholder}\n          </chakra.div>\n        )}\n      </chakra.div>\n    )\n  }\n)\n","import { ControllerStateAndHelpers } from 'downshift'\nimport { createContext } from '@chakra-ui/utils'\nimport { RefObject } from 'react'\n\ntype SelectContext<Item = any> = ControllerStateAndHelpers<Item> & {\n  isDisabled?: boolean\n  inputRef: RefObject<HTMLInputElement>\n}\nconst [SelectProvider, useSelect] = createContext<SelectContext>({\n  strict: false,\n  name: 'DownshiftContext'\n})\n\nexport { SelectProvider, useSelect }\n","import React, { useImperativeHandle, useRef } from 'react'\nimport {\n  chakra,\n  ChakraProps,\n  HTMLChakraProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef\n} from '@chakra-ui/system'\nimport {\n  dataAttr,\n  MaybeRenderProp,\n  runIfFn,\n  cx,\n  callAllHandlers\n} from '@chakra-ui/utils'\nimport Icon from '@chakra-ui/icon'\nimport { SearchInput } from './search-input'\nimport Downshift, {\n  ControllerStateAndHelpers,\n  DownshiftProps,\n  GetItemPropsOptions,\n  PropGetters\n} from 'downshift'\nimport { SelectProvider, useSelect } from './use-select'\n\nexport interface SelectValueProps extends HTMLChakraProps<'div'> {}\nexport const SelectValue = forwardRef<SelectValueProps, 'div'>((props, ref) => {\n  return (\n    <chakra.div\n      ref={ref}\n      d='flex'\n      alignItems='center'\n      flexWrap='wrap'\n      pos='relative'\n      overflow='hidden'\n      padding='2px 8px'\n      boxSizing='border-box'\n      pr={12}\n      w='100%'\n      {...props}\n    />\n  )\n})\n\nexport interface SelectIndicatorProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectIndicator = forwardRef<SelectIndicatorProps, 'div'>(\n  ({ children, ...props }, ref) => {\n    return (\n      <chakra.div\n        ref={ref}\n        d='flex'\n        flexShrink={0}\n        alignItems='center'\n        alignSelf='stretch'\n        padding='2px 8px'\n        pos='absolute'\n        insetY={0}\n        right={0}\n        {...props}\n      >\n        {children}\n      </chakra.div>\n    )\n  }\n)\n\nexport interface ArrowIndicatorProps extends HTMLChakraProps<'div'> {}\nexport const ArrowIndicator = forwardRef<SelectIndicatorProps, 'div'>(\n  (props, ref) => {\n    return (\n      <chakra.div\n        ref={ref}\n        as='span'\n        display='flex'\n        alignItems='center'\n        pointerEvents='none'\n        color='gray.500'\n        {...props}\n      />\n    )\n  }\n)\n\nexport const SelectClearIndicator = forwardRef<ArrowIndicatorProps, 'div'>(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { selectedItem, clearSelection, inputRef } = useSelect()\n    const _className = cx('chakra-select__clean-btn', className)\n\n    if (!selectedItem) return null\n    return (\n      <chakra.div\n        d='flex'\n        padding={1}\n        ref={ref}\n        aria-hidden\n        className={_className}\n        zIndex={1}\n        tabIndex={-1}\n        outline='none'\n        color='gray.500'\n        _hover={{ color: 'gray.600' }}\n        {...rest}\n        onClick={callAllHandlers(onClick, (event: any) => {\n          event.stopPropagation()\n          clearSelection()\n          inputRef?.current?.focus()\n        })}\n      >\n        <Icon focusable='false' aria-hidden h={2} w={2}>\n          <path\n            fill='currentColor'\n            d='M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z'\n          />\n        </Icon>\n      </chakra.div>\n    )\n  }\n)\n\nexport interface SelectControlProps extends HTMLChakraProps<'button'> {}\n\nexport const SelectControl = forwardRef<SelectControlProps, 'button'>(\n  (props, ref) => {\n    const { getToggleButtonProps, isDisabled } = useSelect()\n    const styles = useStyles()\n\n    return (\n      <chakra.button\n        ref={ref}\n        disabled={isDisabled}\n        __css={styles.control}\n        {...getToggleButtonProps()}\n        {...props}\n      />\n    )\n  }\n)\n\nexport interface SelectAutocomplete extends HTMLChakraProps<'div'> {}\nexport const SelectAutocomplete = forwardRef<SelectAutocomplete, 'div'>(\n  (props, ref) => {\n    const styles = useStyles()\n    const { isDisabled } = useSelect()\n\n    return (\n      <chakra.div\n        data-disabled={dataAttr(isDisabled)}\n        ref={ref}\n        __css={styles.control}\n        {...props}\n      />\n    )\n  }\n)\n\nexport const SelectButton = forwardRef<SelectControlProps, 'button'>(\n  (props, ref) => {\n    const { getToggleButtonProps, inputRef, isDisabled } = useSelect()\n    return (\n      <chakra.button\n        tabIndex={-1}\n        disabled={isDisabled}\n        pos='absolute'\n        inset={0}\n        w='100%'\n        h='100%'\n        cursor='default'\n        _focus={{ outline: 'none' }}\n        _disabled={{\n          opacity: 0.4,\n          cursor: 'not-allowed'\n        }}\n        ref={ref}\n        {...getToggleButtonProps({\n          onClick: () => inputRef?.current?.focus()\n        })}\n        {...props}\n      />\n    )\n  }\n)\n\nexport interface SelectSearchInputProps extends HTMLChakraProps<'input'> {}\nexport const SelectSearchInput = forwardRef<SelectSearchInputProps, 'input'>(\n  (props, ref) => {\n    const {\n      getInputProps,\n      isDisabled,\n      inputRef,\n      selectedItem,\n      itemToString\n    } = useSelect()\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef?.current?.focus()\n      }\n    }))\n    const placeholder = itemToString(selectedItem) || props.placeholder\n    return (\n      <SelectValue>\n        {isDisabled && placeholder && (\n          <chakra.span\n            pos='absolute'\n            overflow='hidden'\n            textOverflow='ellipsis'\n            whiteSpace='nowrap'\n          >\n            {placeholder}\n          </chakra.span>\n        )}\n        <chakra.div\n          m={0.5}\n          pb={0.5}\n          pt={0.5}\n          visibility={isDisabled ? 'hidden' : 'visible'}\n          w='100%'\n        >\n          <SearchInput\n            isDisabled={isDisabled}\n            type='text'\n            autoCapitalize='none'\n            ref={inputRef}\n            {...props}\n            {...getInputProps()}\n          />\n        </chakra.div>\n      </SelectValue>\n    )\n  }\n)\n\nexport type SelectOptionProps<Item = any> = Omit<\n  GetItemPropsOptions<Item>,\n  'item' | 'disabled' | 'value'\n> &\n  Omit<ChakraProps, 'value'> & {\n    value: GetItemPropsOptions<Item>['item']\n    isDisabled?: boolean\n    children: MaybeRenderProp<{\n      isSelected?: boolean\n      isActive?: boolean\n    }>\n  }\n\nexport function SelectOption<Item = any>({\n  children,\n  value,\n  index,\n  isDisabled,\n  ...props\n}: SelectOptionProps<Item>) {\n  const { getItemProps, selectedItem, highlightedIndex } = useSelect()\n  const styles = useStyles()\n  const isSelected = selectedItem === value\n  const isActive = highlightedIndex === index\n  return (\n    <chakra.li\n      bg={isActive ? 'gray.50' : 'white'}\n      data-disabled={dataAttr(isDisabled)}\n      {...getItemProps({\n        item: value,\n        index\n      })}\n      aria-selected={props.isSelected ? 'true' : `${isSelected}`}\n      __css={styles.option}\n      {...props}\n    >\n      {runIfFn(children, {\n        isSelected,\n        isActive\n      })}\n    </chakra.li>\n  )\n}\n\nexport interface SelectMenuListProps extends HTMLChakraProps<'ul'> {}\n\nexport const SelectMenuList = forwardRef<SelectMenuListProps, 'ul'>(\n  ({ children, ...props }, ref) => {\n    const { getMenuProps } = useSelect()\n    const styles = useStyles()\n\n    return (\n      <chakra.ul\n        ref={ref}\n        __css={{\n          ...styles.list,\n          fontSize: { base: 'base', sm: 'sm' }\n        }}\n        {...getMenuProps()}\n        {...props}\n      >\n        {children}\n      </chakra.ul>\n    )\n  }\n)\n\nexport interface SelectMenuProps extends HTMLChakraProps<'div'> {}\n\nexport const SelectMenu = forwardRef<SelectMenuProps, 'div'>((props, ref) => {\n  const styles = useStyles()\n  const { isOpen } = useSelect()\n  if (!isOpen) return null\n  return (\n    <chakra.div\n      ref={ref}\n      __css={{\n        pos: 'absolute',\n        ...styles.menu\n      }}\n      {...props}\n    />\n  )\n})\n\nexport type SelectProps<Item = any> = Omit<ChakraProps, 'onChange'> &\n  Pick<DownshiftProps<Item>, 'itemToString' | 'defaultIsOpen'> & {\n    isOpen?: boolean\n    defaultHighlightedIndex?: number\n    value?: Item | null\n    defaultValue?: Item\n    isDisabled?: boolean\n    onChange?(\n      selectedItem: Item | null | undefined,\n      stateAndHelpers?: ControllerStateAndHelpers<Item>\n    ): void\n    children: MaybeRenderProp<{\n      isOpen: boolean\n      highlightedIndex: number | null\n      selectedItem: Item | null\n      onClose?(): void\n      inputValue?: string | null\n      getLabelProps: PropGetters<Item>['getLabelProps']\n    }>\n  }\n\nexport function Select<Item = any>({\n  children,\n  defaultValue,\n  defaultIsOpen,\n  onChange,\n  itemToString,\n  isDisabled,\n  ...props\n}: SelectProps<Item>) {\n  const styles = useMultiStyleConfig('SelectSingle', {})\n  const inputRef = useRef<HTMLInputElement>(null)\n  return (\n    <Downshift\n      onChange={onChange}\n      initialSelectedItem={defaultValue}\n      defaultIsOpen={defaultIsOpen}\n      itemToString={itemToString}\n    >\n      {(downshift) => (\n        <chakra.div pos='relative' {...props} {...downshift.getRootProps()}>\n          <StylesProvider value={styles}>\n            <SelectProvider value={{ ...downshift, isDisabled, inputRef }}>\n              {runIfFn(children, {\n                inputValue: downshift.inputValue,\n                isOpen: downshift.isOpen,\n                highlightedIndex: downshift.highlightedIndex,\n                selectedItem: downshift.selectedItem,\n                getLabelProps: downshift.getLabelProps\n              })}\n            </SelectProvider>\n          </StylesProvider>\n        </chakra.div>\n      )}\n    </Downshift>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  chakra,\n  ChakraProvider,\n  extendTheme,\n  FormControl,\n  FormLabel,\n  Icon\n} from '@chakra-ui/react'\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport { matchSorter } from 'match-sorter'\n\nimport {\n  theme as selectTheme,\n  Select,\n  SelectControl,\n  SelectIndicator,\n  SelectMenu,\n  SelectMenuList,\n  SelectOption,\n  SelectSearchInput,\n  SelectClearIndicator,\n  ArrowIndicator,\n  SelectButton,\n  SelectValue,\n  SelectAutocomplete\n} from 'chakra-ui-select'\n\nconst theme = extendTheme({\n  components: {\n    SelectSingle: selectTheme,\n    Autocomplete: selectTheme\n  }\n})\n\nconst fruits = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'pear', label: 'Pear' },\n  { value: 'orange', label: 'Orange' },\n  { value: 'grape', label: 'Grape' },\n  { value: 'banana', label: 'Banana' }\n]\n\nconst fruitValues = fruits.map((item) => item.value)\n\ntype Option = {\n  value: string\n  label: string\n}\n\nconst App = () => {\n  const [selected, setSelected] = useState<Option | null | undefined>()\n\n  const itemToString = (item: Option | null) => item?.label ?? ''\n\n  return (\n    <ChakraProvider theme={theme}>\n      <chakra.div my={4} maxW='lg' mx='auto'>\n        <Select my={4}>\n          {({ selectedItem }) => {\n            return (\n              <>\n                <SelectControl>\n                  <SelectValue>{selectedItem ?? 'Select'}</SelectValue>\n                  <SelectIndicator>\n                    <ArrowIndicator>\n                      <Icon as={ChevronDownIcon} />\n                    </ArrowIndicator>\n                  </SelectIndicator>\n                </SelectControl>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {fruitValues.map((option, index) => (\n                      <SelectOption key={option} value={option} index={index}>\n                        {option}\n                      </SelectOption>\n                    ))}\n                  </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </Select>\n\n        <Select\n          my={4}\n          value={selected}\n          onChange={(changes) => setSelected(changes)}\n          itemToString={itemToString}\n        >\n          {({ selectedItem }) => {\n            return (\n              <>\n                <SelectControl>\n                  <SelectValue>{itemToString(selectedItem)}</SelectValue>\n                  <SelectIndicator>\n                    <SelectClearIndicator />\n                    <ArrowIndicator>\n                      <Icon as={ChevronDownIcon} />\n                    </ArrowIndicator>\n                  </SelectIndicator>\n                </SelectControl>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {fruits.map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        value={option}\n                        index={index}\n                      >\n                        {option.label}\n                      </SelectOption>\n                    ))}\n                  </SelectMenuList>\n                </SelectMenu>\n              </>\n            )\n          }}\n        </Select>\n\n        <Select\n          my={4}\n          isDisabled\n          itemToString={itemToString}\n          defaultValue={fruits[2]}\n        >\n          {({ selectedItem }) => (\n            <>\n              <SelectControl>\n                <SelectValue>{itemToString(selectedItem)}</SelectValue>\n                <SelectIndicator>\n                  <SelectClearIndicator />\n                  <ArrowIndicator>\n                    <Icon as={ChevronDownIcon} />\n                  </ArrowIndicator>\n                </SelectIndicator>\n              </SelectControl>\n              <SelectMenu>\n                <SelectMenuList>\n                  {fruits.map((option, index) => (\n                    <SelectOption\n                      key={option.value}\n                      value={option}\n                      index={index}\n                    >\n                      {option.label}\n                    </SelectOption>\n                  ))}\n                </SelectMenuList>\n              </SelectMenu>\n            </>\n          )}\n        </Select>\n\n        <Select my={4} itemToString={itemToString} defaultValue={fruits[1]}>\n          <SelectAutocomplete>\n            <SelectSearchInput placeholder='Select' />\n            <SelectButton aria-label='toggle menu'>\n              <SelectIndicator>\n                <SelectClearIndicator />\n                <ArrowIndicator>\n                  <Icon as={ChevronDownIcon} />\n                </ArrowIndicator>\n              </SelectIndicator>\n            </SelectButton>\n          </SelectAutocomplete>\n          <SelectMenu>\n            <SelectMenuList>\n              {fruits.map((option, index) => (\n                <SelectOption key={option.value} value={option} index={index}>\n                  {option.label}\n                </SelectOption>\n              ))}\n            </SelectMenuList>\n          </SelectMenu>\n        </Select>\n\n        <Select my={4} itemToString={itemToString}>\n          {({ inputValue, getLabelProps }) => {\n            const getFilteredItems = (items: Option[]) => {\n              return matchSorter(items, inputValue ?? '', { keys: ['label'] })\n            }\n            const items = getFilteredItems(fruits)\n            return (\n              <FormControl>\n                <FormLabel {...getLabelProps()}>Select a fruit</FormLabel>\n                <SelectAutocomplete>\n                  <SelectSearchInput placeholder='Select' />\n                  <SelectButton aria-label='toggle menu'>\n                    <SelectIndicator>\n                      <SelectClearIndicator />\n                      <ArrowIndicator>\n                        <Icon as={ChevronDownIcon} />\n                      </ArrowIndicator>\n                    </SelectIndicator>\n                  </SelectButton>\n                </SelectAutocomplete>\n                <SelectMenu>\n                  <SelectMenuList>\n                    {items.map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        value={option}\n                        index={index}\n                      >\n                        {option.label}\n                      </SelectOption>\n                    ))}\n                    {items.length <= 0 && (\n                      <chakra.div py={2} pl={3} pr={9}>\n                        No found\n                      </chakra.div>\n                    )}\n                  </SelectMenuList>\n                </SelectMenu>\n              </FormControl>\n            )\n          }}\n        </Select>\n      </chakra.div>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}